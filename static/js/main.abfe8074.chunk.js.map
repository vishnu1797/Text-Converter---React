{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","backgroundColor","heading","name","value","onChange","event","console","log","target","cols","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","class","role","word","lower","charAt","slice","capitalize","message","defaultProps","Contact","App","setMode","setAlert","setTimeout","About","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.abfe8074.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\"> */}\r\n                {/* <Link className=\"nav-link active\" to=\"/about\">{props.About}</Link> */}\r\n              {/* </li> */}\r\n\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n};\r\n\r\n// Props have also types like 1-propTypes -numbers, string, objects etc. and 2- Default proptypes\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  Contact: PropTypes.string\r\n}\r\n\r\n// Default propTypes\r\nNavbar.defaultProps = {\r\n  title: \"To kaise hai aap log\",\r\n  Contact: \"Contact Us\"\r\n};","import React, {useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    // Code for converting text to Upper case\r\n    const onClickChange = () =>{\r\n        console.log('The button was clicked '  + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Text converted to Uppercase', 'success')\r\n    }\r\n\r\n    const onWriteChange = (event) =>{\r\n        console.log('On change as clicked')\r\n        setText(event.target.value);\r\n    }\r\n\r\n    // Code for converting text to Lower case\r\n    const handleOnChange = () =>{\r\n        console.log('The button was clicked '  + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Text converted to Lowercase', 'success')\r\n    }\r\n\r\n    // Code for clearing the text\r\n    const onClear = () =>{\r\n        console.log('The button was clicked '  + text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert('Text was cleared', 'success')\r\n    }\r\n\r\n   \r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n\r\n\r\n    // // Writing code for enabling dark mode in our present website\r\n    // const [myStyle, setMyStyle] =  useState({\r\n    //     color:'black',\r\n    //     backgroundColor:'white', \r\n    //     // border:'2px solid green'\r\n    // });\r\n\r\n    // const [btnMode, setbtnMode] = useState( 'Enable dark Mode');\r\n\r\n    // const toggleStyle = ()=>{\r\n    //     if(myStyle.color === 'black'){\r\n    //         setMyStyle({\r\n    //             color:'white',\r\n    //             backgroundColor:'black'\r\n    //         })\r\n    //         setbtnMode('Enable light mode')\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle(\r\n    //             {\r\n    //                 color:'black',\r\n    //                 backgroundColor:'white'\r\n    //             } )\r\n    //             setbtnMode('Enable dark Mode');\r\n    //     }\r\n\r\n    // }\r\n\r\n    return (\r\n    <>\r\n    <div className={`container text-${props.mode==='light'?'dark':'white'}`} style={{backgroundColor: props.mode==='dark'?'blue':'white'}} >\r\n        <h1>{props.heading} </h1>\r\n        <div className=\"container\" style={{backgroundColor: props.mode==='dark'?'blue':'white'}}>\r\n            <textarea className={`text-${props.mode==='light'?'dark':'white'}`} name=\"textarea\" id=\"textArea\" value={text} onChange={onWriteChange} style={{backgroundColor: props.mode==='dark'?'blue':'white'}} cols=\"100\" rows=\"12\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-3\"   onClick={onClickChange} >Convert to UC</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleOnChange}>Convert to LC</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={onClear}>Clear Text</button>\r\n        {/* <button className=\"btn btn-primary mx-5\"  onClick={toggleStyle}>Enable dark Mode</button> */}\r\n\r\n        <h1>Your text summary</h1>\r\n        <p>Your text contains {text.split(\" \").length} words and {(text.length)} characters </p>\r\n        <p> <b> Your text will take {0.004*text.split(\" \").length} minutes read </b></p>\r\n\r\n        <h2>Your text preview</h2>\r\n        <p>{text.length>0?text:\"Please enter some text in textbox for preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    // Adding capitalize function for capital first letter of our alert type \r\n    const capitalize  = (word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (\r\n     \r\n          props.alert &&  <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n            </div>\r\n     \r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert'\n// import About from './components/About'\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  // Adding dark mode in app.js\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'blue';\n      showAlert('Dark Mode is enabled', 'success');\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n    }\n  }\n\n  // Adding auto-dismissing alerts\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title = \"Welcome\" About=\"About\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n        <div className=\"container my-3\">\n    {/* <Switch> */}\n          {/* <Route path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/\"> */}\n          <Textform showAlert={showAlert} heading=\"Enter your text to analyze\" mode={mode}/>\n      {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}